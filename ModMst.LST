C51 COMPILER V9.00   MODMST                                                                05/09/2013 21:26:09 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE MODMST
OBJECT MODULE PLACED IN ModMst.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ModMst.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #if !defined(__MODMST__)
   2          #define __MODMST__
   3          
   4          #include "define.h"
   5          
   6          #ifdef _MODBUSMASTER_COM0
              #include "CommPort0.h"
              #else
   9          #include "CommPort1.h"
  10          #endif
  11          
  12          #ifdef _MODBUSSLAVE //将Value[]包含进来
  13          #include "modslv.h"
  14          #endif
  15          
  16          #include "crc16.h"
  17          #include "lcd_dis.h"
  18          
  19          typedef union
  20          {
  21                  int W;
  22                  unsigned char B[2];
  23                  struct
  24                  {
  25                          unsigned char H, L;
  26                  }BX;
  27          }WByte;
  28          
  29          bit ModMst_Idle = 1;
  30          char modscan = -3;
  31          
  32          xdata char ModMst_ReadBit_Mask = 0;
  33          xdata char * ModMst_RTN=0;
  34          
  35          xdata WByte Tmpi;
  36          
  37          xdata unsigned char ModMst_StartAddr = 32;
  38          xdata unsigned char ModMst_MaxAddr = 15;
  39          
  40          void ModMst_Rcv();
  41          
  42          #ifdef _MODBUSMASTER_COM0
              bit ModMst(char SA, char FN, unsigned int DA, unsigned int DL, unsigned char * DataOrRTN)
              {
                      if (!ModMst_Idle) return 0;
                      data char i=0;
              
                      COM0_SndCount = 0;
                      ModMst_Idle = 0;
                      COM0_rsBuf[0]=SA;
                      COM0_rsBuf[1]=FN;
                      Tmpi.W = DA;
                      COM0_rsBuf[2]=Tmpi.BX.H;
                      COM0_rsBuf[3]=Tmpi.BX.L;
                      if (FN==1 || FN==2){
C51 COMPILER V9.00   MODMST                                                                05/09/2013 21:26:09 PAGE 2   

                              Tmpi.W = (DL+7)/8;
                              COM0_rsBuf[4]=Tmpi.BX.H;
                              COM0_rsBuf[5]=Tmpi.BX.L;
                              ModMst_ReadBit_Mask = DL % 8;   //用于接收到的数据，取有效的位！
                      }else{
                              COM0_rsBuf[4]=Tmpi.BX.H;
                              COM0_rsBuf[5]=Tmpi.BX.L;
                      }
                      
                      if (FN>=1 && FN<=4){
                              Tmpi.W = crc16(COM0_rsBuf,6);
                              COM0_rsBuf[6] = Tmpi.BX.L;
                              COM0_rsBuf[7] = Tmpi.BX.H;
                              
                              ModMst_RTN->W = DataOrRTN;      //用于存放返回数据的指针
                              
                              COM0_SndCount = 8;
                      }else if (FN==15 || FN ==16){
                              COM0_rsBuf[6] = (FN==15)?(DL+7)/8 : (DL * 2) & 0xFF;
                              for (i = 0;i<COM0_rsBuf[6];i++){
                                      COM0_rsBuf[7+i] = *(DataOrRTN+i);
                              }
                              Tmpi.W = crc16(COM0_rsBuf,7+i);
                              COM0_rsBuf[7+(i++)]=Tmpi.BX.L;
                              COM0_rsBuf[7+(i++)]=Tmpi.BX.H;
                              COM0_SndCount = 7+i;
                      }
                      
                      if (COM0_SndCount>0){
                              COM0_Start_Sent();
                      }
                      return 1;
              }
              
              void ModMst_Rcv(){
                      xdata int r = 9999;
                      xdata bit f = 0;
                      if (COM0_RcvCompleted){
                              if (!COM0_RcvCount)
                              {
                                      *ModMst_RTN = 9998;
                              }
                              else if (crc16(COM0_rsBuf,COM0_RcvCount)==0)
                              {
                                      Tmpi.BX.H = COM0_rsBuf[3];
                                      Tmpi.BX.L =     COM0_rsBuf[4];
                                      if (Tmpi.BX.H & 0x80)
                                      {
                                              f = 1;
                                              Tmpi.BX.H &= ~0x80;
                                      }
              
                                      Tmpi.W /= 10;
              
                                      if (Tmpi.W>50)
                                      {
                                              if (f)
                                              {
                                                      r = (int)(float)Value[1]*100.0 / -Tmpi.W;
                                                      if (r<-1000) r = 9999;
                                              }
                                              else
C51 COMPILER V9.00   MODMST                                                                05/09/2013 21:26:09 PAGE 3   

                                              {
                                                      r = (int)(float)Value[0]*100.0 / Tmpi.W;
                                                      if (r>1000) r = 9999;
                                              }
                                      }
                                      *ModMst_RTN = r;
                              }
              
                              COM0_RcvCount = 0;
                              COM0_RcvCompleted = 0;
              
                              ModMst_Idle = 1;
                      }       
              }
              
              #else
 134          
 135          bit ModMst(char SA, char FN, unsigned int DA, unsigned int DL, unsigned char * DataOrRTN)
 136          {
 137   1              xdata char i=0;
 138   1              if(!ModMst_Idle) return 0;
 139   1              //MM_InWaiting = 1;
 140   1              ModMst_Idle = 0;
 141   1              COM1_SndCount = 0;
 142   1              COM1_RcvCount = 0;
 143   1      
 144   1              ModMst_RTN = 0;
 145   1      
 146   1              COM1_rsBuf[0]=SA;
 147   1              COM1_rsBuf[1]=FN;
 148   1              Tmpi.W = DA;
 149   1              COM1_rsBuf[2]=Tmpi.BX.H;
 150   1              COM1_rsBuf[3]=Tmpi.BX.L;
 151   1              if (FN==1 || FN==2)
 152   1              {
 153   2                      Tmpi.W = (DL+7)/8;
 154   2                      COM1_rsBuf[4]=Tmpi.BX.H;
 155   2                      COM1_rsBuf[5]=Tmpi.BX.L;
 156   2                      ModMst_ReadBit_Mask = DL % 8;   //用于接收到的数据，取有效的位！
 157   2              }
 158   1              else
 159   1              {
 160   2                      Tmpi.W = DL;
 161   2                      COM1_rsBuf[4]=Tmpi.BX.H;
 162   2                      COM1_rsBuf[5]=Tmpi.BX.L;
 163   2              }
 164   1      
 165   1              if (FN>=1 && FN<=6)
 166   1              {
 167   2                      Tmpi.W = crc16(COM1_rsBuf,6);
 168   2                      COM1_rsBuf[6] = Tmpi.BX.L;
 169   2                      COM1_rsBuf[7] = Tmpi.BX.H;
 170   2                      
 171   2                      ModMst_RTN = DataOrRTN; //用于存放返回数据的指针
 172   2                      
 173   2                      COM1_SndCount = 8;
 174   2              }
 175   1              else if (FN==15 || FN ==16)
 176   1              {
 177   2                      COM1_rsBuf[6] = (FN==15)?(DL+7)/8 : (DL * 2) & 0xFF;
 178   2                      for (i = 0;i<COM1_rsBuf[6];i++)
 179   2                      {
C51 COMPILER V9.00   MODMST                                                                05/09/2013 21:26:09 PAGE 4   

 180   3                              COM1_rsBuf[7+i] = *(DataOrRTN+i);
 181   3                      }
 182   2                      Tmpi.W = crc16(COM1_rsBuf,7+COM1_rsBuf[6]);
 183   2                      COM1_rsBuf[7+COM1_rsBuf[6]]=Tmpi.BX.L;//CRC_CODE & 0xFF;
 184   2                      COM1_rsBuf[8+COM1_rsBuf[6]]=Tmpi.BX.H;//(CRC_CODE>>8) & 0xFF;
 185   2                      COM1_SndCount = COM1_rsBuf[6]+9;
 186   2              }
 187   1              
 188   1              if (COM1_SndCount>0)
 189   1              {
 190   2                      COM1_Start_Sent();
 191   2              }
 192   1              return 1;
 193   1      }
 194          
 195          void ModMst_Rcv(){
 196   1              //本函数中插入电阻值计算部分电流值>0使用Value[1]/电流值，否则使用Value[2]/电流值。
 197   1              if (COM1_RcvCompleted)
 198   1              {
 199   2                      xdata char i = 0;
 200   2                      //ShowChar(0,0,COM1_RcvCount,1);
 201   2                      if (COM1_RcvCount==0)
 202   2                      {
 203   3                              *ModMst_RTN = 0xFF;
 204   3                      }
 205   2                      else if (crc16(COM1_rsBuf,COM1_RcvCount)==0 && COM1_rsBuf[1]>=1 && COM1_rsBuf[1]<=4)
 206   2                      {
 207   3                              for(i=0;i<COM1_rsBuf[2];i++)
 208   3                              {
 209   4                                      *(ModMst_RTN+i) = COM1_rsBuf[i+3];
 210   4                              }
 211   3                      }
 212   2      
 213   2                      COM1_RcvCount = 0;
 214   2                      COM1_RcvCompleted = 0;
 215   2      
 216   2                      ModMst_Idle = 1;
 217   2              }       
 218   1      }
 219          #endif
 220          
 221          #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    662    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      8       2
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      1       9
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
