C51 COMPILER V9.00   LCD_DIS                                                               05/09/2013 21:26:08 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE LCD_DIS
OBJECT MODULE PLACED IN LCD_Dis.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE LCD_Dis.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          //========================================================================
   2          // 文件名:  LCD_Dis.c
   3          // 作  者: xinqiang Zhang(小丑)  (email: xinqiang@Mzdesign.com.cn)
   4          // 日  期: 2009/02/10
   5          // 描  述: MzLH04-12864 LCD显示模块驱动V1.0版
   6          //                      基本功能接口函数集
   7          //
   8          // 参  考: 无
   9          // 版  本:
  10          //      2009/02/10      First version    Mz Design
  11          //========================================================================
  12          
  13          #include "LCD_Config.h"
  14          
  15          #ifndef __LCD_DISCFILE__
  16          #define __LCD_DISCFILE__
  17          
  18          xdata unsigned char X_Witch=6;
  19          xdata unsigned char Y_Witch=10;
  20          xdata unsigned char X_Witch_cn=16;
  21          xdata unsigned char Y_Witch_cn=16;
  22          xdata unsigned char Dis_Zero=0;
  23          xdata unsigned char* dot = "…";
  24          
  25          
  26          char i2s_buf[15]={0};
  27          // n 显示位数
  28          // n>0x80 代表为无符号数
  29          char *i2s(int d,unsigned char n)
  30          {
  31   1              bit sign = 0;
  32   1              char i = 7,j;
  33   1              long dx = d;
  34   1              if (n & 0x80)
  35   1              {
  36   2                      n -= 0x80;
  37   2                      dx = (n==3)?(unsigned char)d:(unsigned int)d;
  38   2              }
  39   1      
  40   1              if (dx<0)
  41   1              {
  42   2                      dx = -dx;
  43   2                      sign = 1;
  44   2              }
  45   1              while(dx)
  46   1              {
  47   2                      i2s_buf[i--] = dx % 10 + '0';
  48   2                      dx = dx / 10;
  49   2              }
  50   1              if (i==7) i2s_buf[i--] = '0';
  51   1              if (sign) i2s_buf[i--] = '-';
  52   1              j = n - (7 - i);
  53   1              if (j>=0)
  54   1              {
  55   2                      i2s_buf[8+j] = 0;
C51 COMPILER V9.00   LCD_DIS                                                               05/09/2013 21:26:08 PAGE 2   

  56   2                      while(j--)
  57   2                      {
  58   3                              i2s_buf[8+j] = 0x20;
  59   3                      }
  60   2              }
  61   1              return &i2s_buf[i+1];                           
  62   1      }
  63          
  64          
  65          //========================================================================
  66          // 函数: void LCD_Init(void)
  67          // 描述: LCD初始化程序，主要在里面完成端口初始化以及LCD模块的复位
  68          // 参数: 无 
  69          // 返回: 无
  70          // 备注:
  71          // 版本:
  72          //      2009/02/10      First version    Mz Design
  73          //========================================================================
  74          void TimeDelay(unsigned int Timers)
  75          {
  76   1              xdata unsigned int i;
  77   1              while(Timers)
  78   1              {
  79   2                      Timers--;
  80   2                      for(i=0;i<100;i++) ;
  81   2              }
  82   1      }
  83          void LCD_Init(void)
  84          {
  85   1              //SS和SCK预先设置为高电平
  86   1              SPI_SCK = 1;
  87   1              SPI_CS = 1;
  88   1              
  89   1              //复位LCD模块
  90   1              SPI_RES = 0;
  91   1              TimeDelay(50);                  
  92   1              //保持低电平大概2ms左右
  93   1              SPI_RES = 1;
  94   1              TimeDelay(80);                                  //延时大概10ms左右
  95   1      }
  96          //========================================================================
  97          // 函数: void SPI_SSSet(unsigned char Status)
  98          // 描述: 置SS线状态
  99          // 参数: Status   =1则置高电平，=0则置低电平  
 100          // 返回: 无
 101          // 版本:
 102          //      2009/02/10      First version    Mz Design
 103          //========================================================================
 104          void SPI_SSSet(unsigned char Status)
 105          {
 106   1              if(Status)                              //判断是要置SS为低还是高电平？//SS置高电平
 107   1                      SPI_CS = 1;
 108   1              else   //SS置低电平
 109   1                      SPI_CS = 0;
 110   1      }
 111          //========================================================================
 112          // 函数: void SPI_Send(unsigned char Data)
 113          // 描述: 通过串行SPI口输送一个byte的数据置模组
 114          // 参数: Data 要传送的数据 
 115          // 返回: 无
 116          // 版本:
 117          //      2007/07/17      First version
C51 COMPILER V9.00   LCD_DIS                                                               05/09/2013 21:26:08 PAGE 3   

 118          //              2007/07/24              V1.2 for MCS51 Keil C
 119          //========================================================================
 120          void SPI_Send(unsigned char Data)
 121          {
 122   1              xdata unsigned char i=0;
 123   1              for(i=0;i<8;i++)
 124   1              {
 125   2                      //SCK置低
 126   2                      SPI_SCK = 0;
 127   2                      if(Data&0x0080)
 128   2                              SPI_SDA = 1;                    
 129   2                      else SPI_SDA = 0;//
 130   2                      //SCK上升沿触发串行数据采样
 131   2                      SPI_SCK = 1;
 132   2                      Data = Data<<1;                                                 //数据左移一位
 133   2                      //nop();nop();nop();
 134   2              }
 135   1      }
 136          //========================================================================
 137          // 函数: void FontSet(unsigned char Font_NUM,unsigned char Color)
 138          // 描述: ASCII字符字体设置
 139          // 参数: Font_NUM 字体选择,以驱动所带的字库为准 0 6x10, 1 8x16
 140          //               Color  文本颜色,仅作用于ASCII字库 0 为白色,1为黑色 
 141          // 返回: 无
 142          // 备注: 
 143          // 版本:
 144          //      2007/07/19      First version
 145          //========================================================================
 146          void FontSet(unsigned char Font_NUM,unsigned char Color)
 147          {
 148   1              xdata unsigned char ucTemp=0;
 149   1              if(Font_NUM==0)
 150   1              {
 151   2                      X_Witch = 6;//7;
 152   2                      Y_Witch = 10;
 153   2              }
 154   1              else
 155   1              {
 156   2                      X_Witch = 8;
 157   2                      Y_Witch = 16;
 158   2              }
 159   1              ucTemp = (Font_NUM<<4)|Color;
 160   1              //设置ASCII字符的字型
 161   1              SPI_SSSet(0);                                   //SS置低电平                    
 162   1              SPI_Send(0x81);                                 //传送指令0x81
 163   1              SPI_Send(ucTemp);                               //选择8X16的ASCII字体,字符色为黑色
 164   1              SPI_SSSet(1);                                   //完成操作置SS高电平    
 165   1      }
 166          //========================================================================
 167          // 函数: void FontMode(unsigned char Cover,unsigned char Color)
 168          // 描述: 设置字符显示覆盖模式
 169          // 参数: Cover  字符覆盖模式设置，0或1
 170          //               Color 覆盖模式为1时字符显示时的背景覆盖色 
 171          // 返回: 无
 172          // 备注: 
 173          // 版本:
 174          //      2008/11/27      First version
 175          //========================================================================
 176          void FontMode(unsigned char Cover,unsigned char Color)
 177          {
 178   1              xdata unsigned char ucTemp=0;
 179   1              ucTemp = (Cover<<4)|Color;
C51 COMPILER V9.00   LCD_DIS                                                               05/09/2013 21:26:08 PAGE 4   

 180   1              //设置ASCII字符的字型
 181   1              SPI_SSSet(0);                                   //SS置低电平                    
 182   1              SPI_Send(0x89);                                 //传送指令0x81
 183   1              SPI_Send(ucTemp);                               //选择8X16的ASCII字体,字符色为黑色
 184   1              SPI_SSSet(1);                                   //完成操作置SS高电平    
 185   1      }
 186          //========================================================================
 187          // 函数: void FontSet_cn(unsigned char Font_NUM,unsigned char Color)
 188          // 描述: 汉字库字符字体设置
 189          // 参数: Font_NUM 字体选择,以驱动所带的字库为准 0 12x12, 1 16x16
 190          //               Color  文本颜色,仅作用于汉字库  0 为白色,1为黑色 
 191          // 返回: 无
 192          // 备注: 
 193          // 版本:
 194          //      2007/07/19      First version
 195          //========================================================================
 196          void FontSet_cn(unsigned char Font_NUM,unsigned char Color)
 197          {
 198   1              unsigned char ucTemp=0;
 199   1              if(Font_NUM==0)
 200   1              {
 201   2                      X_Witch_cn = 12;
 202   2                      Y_Witch_cn = 12;
 203   2              }
 204   1              else
 205   1              {
 206   2                      X_Witch_cn = 16;
 207   2                      Y_Witch_cn = 16;
 208   2              }
 209   1              ucTemp = (Font_NUM<<4)|Color;
 210   1              //设置ASCII字符的字型
 211   1              SPI_SSSet(0);                                   //SS置低电平                    
 212   1              SPI_Send(0x82);                                 //传送指令0x81
 213   1              SPI_Send(ucTemp);                               //选择8X16的ASCII字体,字符色为黑色
 214   1              SPI_SSSet(1);                                   //完成操作置SS高电平    
 215   1      }
 216          //========================================================================
 217          // 函数: void PutChar(unsigned char x,unsigned char y,unsigned char a) 
 218          // 描述: 写入一个标准ASCII字符
 219          // 参数: x  X轴坐标     y  Y轴坐标
 220          //               a  要显示的字符在字库中的偏移量  
 221          // 返回: 无
 222          // 备注: ASCII字符可直接输入ASCII码即可
 223          // 版本:
 224          //      2007/07/19      First version
 225          //========================================================================
 226          void PutChar(unsigned char x,unsigned char y,unsigned char a) 
 227          {
 228   1              //显示ASCII字符
 229   1              SPI_SSSet(0);                                   //SS置低电平    
 230   1              SPI_Send(7);                                    //传送指令0x07
 231   1              SPI_Send(x);                                    //要显示字符的左上角的X轴位置
 232   1              SPI_Send(y);                                    //要显示字符的左上角的Y轴位置
 233   1              SPI_Send(a);                                    //要显示字符ASCII字符的ASCII码值
 234   1              SPI_SSSet(1);                                   //完成操作置SS高电平
 235   1      }
 236          //========================================================================
 237          // 函数: void PutString(int x,int y,char *p)
 238          // 描述: 在x、y为起始坐标处写入一串标准ASCII字符
 239          // 参数: x  X轴坐标     y  Y轴坐标
 240          //               p  要显示的字符串  
 241          // 返回: 无
C51 COMPILER V9.00   LCD_DIS                                                               05/09/2013 21:26:08 PAGE 5   

 242          // 备注: 仅能用于自带的ASCII字符串显示
 243          // 版本:
 244          //      2007/07/19      First version
 245          //========================================================================
 246          void PutString(unsigned char x,unsigned char y,unsigned char *p)
 247          {
 248   1              while(*p!=0)
 249   1              {
 250   2                      PutChar(x,y,*p);
 251   2                      x += X_Witch;
 252   2                      if((x + X_Witch) > Dis_X_MAX)
 253   2                      {
 254   3                              x = Dis_Zero;
 255   3                              if((Dis_Y_MAX - y) < Y_Witch) break;
 256   3                              else y += Y_Witch;
 257   3                      }
 258   2                      p++;
 259   2              }
 260   1      }
 261          //========================================================================
 262          // 函数: void PutChar_cn(unsigned char x,unsigned char y,unsigned short * GB) 
 263          // 描述: 写入一个二级汉字库汉字
 264          // 参数: x  X轴坐标     y  Y轴坐标
 265          //               a  GB码  
 266          // 返回: 无
 267          // 备注: 
 268          // 版本:
 269          //      2007/07/19      First version
 270          //              2007/07/24              V1.2 for MCS51 Keil C
 271          //========================================================================
 272          void PutChar_cn(unsigned char x,unsigned char y,unsigned char * GB) 
 273          {
 274   1              //显示ASCII字符
 275   1              SPI_SSSet(0);                                   //SS置低电平    
 276   1              SPI_Send(8);                                    //传送指令0x08
 277   1              SPI_Send(x);                                    //要显示字符的左上角的X轴位置
 278   1              SPI_Send(y);                                    //要显示字符的左上角的Y轴位置
 279   1              
 280   1              SPI_Send(*(GB++));      //传送二级字库中汉字GB码的高八位值
 281   1              SPI_Send(*GB);          //传送二级字库中汉字GB码的低八位值
 282   1              SPI_SSSet(1);                                   //完成操作置SS高电平
 283   1      }
 284          //========================================================================
 285          // 函数: void PutString_cn(unsigned char x,unsigned char y,unsigned short *p)
 286          // 描述: 在x、y为起始坐标处写入一串汉字字符
 287          // 参数: x  X轴坐标     y  Y轴坐标
 288          //               p  要显示的字符串  
 289          // 返回: 无
 290          // 备注: 同PutChar_cn中的解释
 291          // 版本:
 292          //      2007/07/19      First version
 293          //              2007/07/24              V1.2 for MCS51 Keil C
 294          //========================================================================
 295          void PutString_cn(unsigned char x,unsigned char y,unsigned char *p)
 296          {
 297   1      
 298   1              while(*p!=0)
 299   1              {
 300   2                      if(*p<128)
 301   2                      {
 302   3                              PutChar(x,y,*p);
 303   3                              x += X_Witch+1;
C51 COMPILER V9.00   LCD_DIS                                                               05/09/2013 21:26:08 PAGE 6   

 304   3                              if((x + X_Witch) > Dis_X_MAX + 2)
 305   3                              {
 306   4                                      x = Dis_Zero;
 307   4                                      if((Dis_Y_MAX - y) < Y_Witch) break;
 308   4                                      else y += Y_Witch_cn;
 309   4                              }
 310   3                              p+=1;
 311   3                      }
 312   2                      else
 313   2                      {
 314   3                              PutChar_cn(x,y,p);
 315   3                              x += X_Witch_cn+1;
 316   3                              if((x + X_Witch_cn) > Dis_X_MAX + 2)
 317   3                              {
 318   4                                      x = Dis_Zero;
 319   4                                      if((Dis_Y_MAX - y) < Y_Witch_cn) break;
 320   4                                      else y += Y_Witch_cn;
 321   4                              }
 322   3                              p+=2;
 323   3                      }
 324   2              }
 325   1      }
 326             
 327          //========================================================================
 328          // 函数: void SetPaintMode(unsigned char Mode,unsigned char Color)
 329          // 描述: 绘图模式设置
 330          // 参数: Mode 绘图模式    Color  像素点的颜色,相当于前景色  
 331          // 返回: 无
 332          // 备注: Mode无效
 333          // 版本:
 334          //      2007/07/19      First version
 335          //========================================================================
 336          
 337          void SetPaintMode(unsigned char Mode,unsigned char Color)
 338          {
 339   1              xdata unsigned char ucTemp=0;
 340   1              ucTemp = (Mode<<4)|Color;
 341   1              //设置绘图模式
 342   1              SPI_SSSet(0);                                   //SS置低电平                    
 343   1              SPI_Send(0x83);                                 //传送指令0x83
 344   1              SPI_Send(ucTemp);                               //选择8X16的ASCII字体,字符色为黑色
 345   1              SPI_SSSet(1);                                   //完成操作置SS高电平
 346   1      }
 347          
 348          //========================================================================
 349          // 函数: void PutPixel(unsigned char x,unsigned char y)
 350          // 描述: 在x、y点上绘制一个前景色的点
 351          // 参数: x  X轴坐标     y  Y轴坐标
 352          // 返回: 无
 353          // 备注: 使用前景色
 354          // 版本:
 355          //      2007/07/19      First version
 356          //========================================================================
 357          /*
 358          void PutPixel(unsigned char x,unsigned char y)
 359          {
 360                  //绘点操作      
 361                  SPI_SSSet(0);                                   //SS置低电平
 362                  SPI_Send(1);                                    //送指令0x01
 363                  SPI_Send(x);                                    //送第一个数据,即设置点的X轴位置
 364                  SPI_Send(y);                                    //点的Y轴位置
 365                  SPI_SSSet(1);                                   //完成操作置SS高电平
C51 COMPILER V9.00   LCD_DIS                                                               05/09/2013 21:26:08 PAGE 7   

 366          }
 367          */
 368          //========================================================================
 369          // 函数: void Line(unsigned char s_x,unsigned char  s_y,
 370          //                                      unsigned char  e_x,unsigned char  e_y)
 371          // 描述: 在s_x、s_y为起始坐标，e_x、e_y为结束坐标绘制一条直线
 372          // 参数: x  X轴坐标     y  Y轴坐标
 373          // 返回: 无
 374          // 备注: 使用前景色
 375          // 版本:
 376          //      2007/07/19      First version
 377          //========================================================================
 378          
 379          void Line(unsigned char s_x,unsigned char  s_y,unsigned char  e_x,unsigned char  e_y)
 380          {  
 381   1              //绘制直线
 382   1              SPI_SSSet(0);                                   //SS置低电平
 383   1              SPI_Send(2);                                    //送指令0x02
 384   1              SPI_Send(s_x);                                  //起点X轴坐标
 385   1              SPI_Send(s_y);                                  //起点Y轴坐标
 386   1              SPI_Send(e_x);                                  //终点X轴坐标
 387   1              SPI_Send(e_y);                                  //终点Y轴坐标
 388   1              SPI_SSSet(1);                                   //完成操作置SS高电平
 389   1      }
 390          
 391          //========================================================================
 392          // 函数: void Circle(unsigned char x,unsigned char y,
 393          //                                      unsigned char r,unsigned char mode)
 394          // 描述: 以x,y为圆心R为半径画一个圆(mode = 0) or 圆面(mode = 1)
 395          // 参数: 
 396          // 返回: 无
 397          // 备注: 画圆函数执行较慢，如果MCU有看门狗，请作好清狗的操作
 398          // 版本:
 399          //      2007/07/19      First version
 400          //========================================================================
 401          /*
 402          void Circle(unsigned char x,unsigned char y,unsigned char r,unsigned char mode)
 403          {
 404                  SPI_SSSet(0);
 405                  if(mode)
 406                          SPI_Send(6);
 407                  else
 408                          SPI_Send(5);
 409                  SPI_Send(x);
 410                  SPI_Send(y);
 411                  SPI_Send(r);
 412                  SPI_SSSet(1);
 413          }
 414          */
 415          //========================================================================
 416          // 函数: void Rectangle(unsigned char left, unsigned char top, unsigned char right,
 417          //                               unsigned char bottom, unsigned char mode)
 418          // 描述: 以x,y为圆心R为半径画一个圆(mode = 0) or 圆面(mode = 1)
 419          // 参数: left - 矩形的左上角横坐标，范围0到126
 420          //               top - 矩形的左上角纵坐标，范围0到62
 421          //               right - 矩形的右下角横坐标，范围1到127
 422          //               bottom - 矩形的右下角纵坐标，范围1到63
 423          //               Mode - 绘制模式，可以是下列数值之一：
 424          //                              0:      矩形框（空心矩形）
 425          //                              1:      矩形面（实心矩形）
 426          // 返回: 无
 427          // 备注: 画圆函数执行较慢，如果MCU有看门狗，请作好清狗的操作
C51 COMPILER V9.00   LCD_DIS                                                               05/09/2013 21:26:08 PAGE 8   

 428          // 版本:
 429          //      2007/07/19      First version
 430          //========================================================================
 431          void Rectangle(unsigned char left, unsigned char top, unsigned char right,
 432                                           unsigned char bottom, unsigned char mode)
 433          {
 434   1              SPI_SSSet(0);
 435   1              if(mode)
 436   1                      SPI_Send(4);
 437   1              else
 438   1                      SPI_Send(3);
 439   1              SPI_Send(left);
 440   1              SPI_Send(top);
 441   1              SPI_Send(right);
 442   1              SPI_Send(bottom);
 443   1              SPI_SSSet(1);
 444   1      }
 445          //========================================================================
 446          // 函数: void ClrScreen(void)
 447          // 描述: 清屏函数，执行全屏幕清除
 448          // 参数: 
 449          // 返回: 无
 450          // 备注: 
 451          // 版本:
 452          //      2007/07/19      First version
 453          //========================================================================
 454          void ClrScreen(void)
 455          {
 456   1              //清屏操作
 457   1              SPI_SSSet(0);                                   //SS置低电平
 458   1              SPI_Send(0x80);                                 //送指令0x80
 459   1              SPI_SSSet(1);                                   //完成操作置SS高电平
 460   1      }
 461          //========================================================================
 462          // 函数: void PutBitmap(unsigned char x,unsigned char y,unsigned char width,
 463          //                                              unsigned char high,unsigned char *p)
 464          // 描述: 在x、y为起始坐标显示一个单色位图
 465          // 参数: x  X轴坐标     y  Y轴坐标
 466          //               width 位图的宽度  
 467          //               high  位图的高度
 468          //               p  要显示的位图的字模首地址  
 469          // 返回: 无
 470          // 备注: 无
 471          // 版本:
 472          //      2008/11/27      First version
 473          //========================================================================
 474          /*
 475          void PutBitmap(unsigned char x,unsigned char y,unsigned char width,unsigned char high,unsigned char *p)
 476          {
 477                  xdata unsigned short Dat_Num;
 478                  //unsigned short i;
 479                  xdata unsigned char ucTemp=0;
 480                  SPI_SSSet(0);                                   //SS置低电平
 481                  SPI_Send(0x0e); 
 482                  SPI_Send(x);
 483                  SPI_Send(y);
 484                  SPI_Send(width);
 485                  SPI_Send(high);
 486                  
 487                  width = width+0x07;
 488                  Dat_Num = (width>>3)*high;
 489                  while(Dat_Num--)
C51 COMPILER V9.00   LCD_DIS                                                               05/09/2013 21:26:08 PAGE 9   

 490                  {
 491                          ucTemp++;
 492                          SPI_Send(*p);
 493                          if(ucTemp>250)                          //如果改换别的MCU时,这里可能需要适当的调整
 494                          {
 495                                  TimeDelay(28);                  //以及此处,以保证前面传送到LCD模块中的数据已被处理完
 496                                  ucTemp = 0;
 497                          }
 498                          p++;
 499                  }
 500                  SPI_SSSet(1);                                   //完成操作置SS高电平
 501          }
 502          
 503          
 504          //========================================================================
 505          // 函数: void ShowChar(unsigned char x,unsigned char y,unsigned char Num,unsigned char type)
 506          // 描述: 在x、y的位置为显示区域的左上角，显示一个unsigned char型数
 507          // 参数: x  X轴坐标     y  Y轴坐标    Num  要显示的8位宽度的数据  type  显示特性(0,1,2)
 508          // 返回: 无
 509          // 备注: 
 510          // 版本:
 511          //      2008/11/27      First version
 512          //========================================================================
 513          void ShowChar(unsigned char x,unsigned char y,unsigned char a,unsigned char type) 
 514          {
 515                  //显示ASCII字符
 516                  SPI_SSSet(0);                                   //SS置低电平    
 517                  SPI_Send(11);                                   //传送指令0x0B
 518                  SPI_Send(x);                                    //要显示字符的左上角的X轴位置
 519                  SPI_Send(y);                                    //要显示字符的左上角的Y轴位置
 520                  SPI_Send(a);                                    //要显示的数据
 521                  SPI_Send(type);
 522                  SPI_SSSet(1);                                   //完成操作置SS高电平
 523          }
 524          //========================================================================
 525          // 函数: void ShowShort(unsigned char x,unsigned char y,unsigned short Num,unsigned char type)
 526          // 描述: 在x、y的位置为显示区域的左上角，显示一个unsigned short型数（16位宽度）
 527          // 参数: x  X轴坐标     y  Y轴坐标    Num  要显示的16位宽度的数据  type  显示特性(0,1,2)
 528          // 返回: 无
 529          // 备注: 
 530          // 版本:
 531          //      2008/11/27      First version
 532          //========================================================================
 533          void ShowShort(unsigned char x,unsigned char y,unsigned short a,unsigned char type) 
 534          {
 535                  //显示ASCII字符
 536                  SPI_SSSet(0);                                   //SS置低电平    
 537                  SPI_Send(12);                                   //传送指令0x0C
 538                  SPI_Send(x);                                    //要显示字符的左上角的X轴位置
 539                  SPI_Send(y);                                    //要显示字符的左上角的Y轴位置
 540                  SPI_Send((unsigned char)(a>>8));
 541                  SPI_Send((unsigned char)a);
 542                  SPI_Send(type);                                 //要显示字符ASCII字符的ASCII码值
 543                  SPI_SSSet(1);                                   //完成操作置SS高电平
 544          }
 545          */
 546          //========================================================================
 547          // 函数: void SetBackLight(unsigned char Deg)
 548          // 描述: 设置背光亮度等级
 549          // 参数: Grade  0~127的等级
 550          // 返回: 无
 551          // 备注: 
C51 COMPILER V9.00   LCD_DIS                                                               05/09/2013 21:26:08 PAGE 10  

 552          // 版本:
 553          //      2008/11/27      First version
 554          //========================================================================
 555          void SetBackLight(unsigned char Deg) 
 556          {
 557   1              //显示ASCII字符
 558   1              SPI_SSSet(0);                                   //SS置低电平    
 559   1              SPI_Send(0x8a);                                 //传送指令0x07
 560   1              SPI_Send(Deg);                                  //要显示字符的左上角的X轴位置
 561   1              SPI_SSSet(1);                                   //完成操作置SS高电平
 562   1      }
 563          
 564          
 565          //==========jwz add===========
 566          unsigned char cStrLen(char * str)
 567          {
 568   1              char* p = str;
 569   1              while(*p++);
 570   1              return ((p-str))/2;
 571   1      }
 572          
 573          unsigned char StrLen(char * str)
 574          {
 575   1              char* p = str;
 576   1              while(*p++);
 577   1              return p-str-1;
 578   1      }
 579          
 580          void jmemcpy(char* s, char * d,unsigned int ls)
 581          {
 582   1              while(ls--) *d++ =  *s++;
 583   1      }
 584          
 585          bit isNum(char* s)
 586          {
 587   1              while(*s)
 588   1              {
 589   2                      if (*s<'0' || *s>'9') 
 590   2                              return 0;
 591   2                      s++;
 592   2              }
 593   1              return 1;
 594   1      }
 595          
 596          //********************************************************
 597          //i 控制标志
 598          // 0000 0000
 599          // 1             = InEdit                                                               0x80
 600          //  1            = cstring                                                              0x40
 601          //   1           = string                                                               0x20
 602          //    1          = Integer                                                              0x10
 603          //                                                                                                      
 604          //      1        = char                                                                 0x08
 605          //       1   = Font size 1=>Large font,0 small font     0x04
 606          //        0  = NC                                                                       0x02
 607          //         1 = invert                                                           0x01
 608          //********************************************************
 609          #define P_EDIT  0x80
 610          #define P_CSTR  0x40
 611          #define P_ASTR  0x20
 612          #define P_INT   0x10
 613          #define P_CHAR  0x08
C51 COMPILER V9.00   LCD_DIS                                                               05/09/2013 21:26:08 PAGE 11  

 614          #define P_FONT  0x04
 615          #define P_AINV  0x02
 616          #define P_INV   0x01
 617          unsigned char Print(char x,char y,char* str,char i)
 618          {
 619   1              char len = (i & (P_CSTR|P_ASTR))?StrLen(str):(i & P_INT)?6:4;
 620   1              bit inv = 1, isn = 0;
 621   1              if (i & P_EDIT) //InEdit
 622   1              {
 623   2                      SetPaintMode(0,0);
 624   2                      Rectangle(x,y,127,y+12,1);
 625   2                      SetPaintMode(0,1);
 626   2                      Line(x,y+12,x+len*6+3,y+12);    
 627   2                      FontMode(1,0);
 628   2              }
 629   1              else if (i & (P_AINV | P_INV))  //Invert
 630   1              {
 631   2                      //SetPaintMode(0,1);
 632   2                      if (i & P_AINV)
 633   2                      {
 634   3                              Rectangle(0,y,127,y+12,1);
 635   3                      }
 636   2                      else
 637   2                      {
 638   3                              Rectangle(x,y,x+len*6+3,y+12,1);
 639   3                      }
 640   2                      FontMode(1,1); inv = 0;
 641   2              }
 642   1              else
 643   1              {
 644   2                      FontMode(1,0);
 645   2              }
 646   1      
 647   1              if (i & P_FONT)         //Large font
 648   1              {
 649   2                      FontSet_cn(1, inv);
 650   2                      FontSet(1, inv);
 651   2              }
 652   1              else                            //Small font
 653   1              {
 654   2                      FontSet_cn(0, inv);
 655   2                      FontSet(0, inv);
 656   2              }
 657   1      
 658   1              if (i & P_CSTR)
 659   1              {
 660   2                      isn = isNum(str);
 661   2                      PutString_cn(x+(isn?1:0),y+(isn?2:0),str);
 662   2              }
 663   1              else if (i & P_ASTR)
 664   1              {
 665   2                      PutString(x+(isn?1:0),y+(isn?2:0),str);
 666   2              }
 667   1              else if (i & P_INT)
 668   1              {
 669   2                      PutString(x+1,y+2,i2s(*(int*)str,6));
 670   2              }
 671   1              else if (i & P_CHAR)
 672   1              {
 673   2                      //ShowChar(x,y,*str,1);
 674   2                      PutString(x+1,y+2,i2s((char)*(char*)str,0x83));
 675   2              }
C51 COMPILER V9.00   LCD_DIS                                                               05/09/2013 21:26:08 PAGE 12  

 676   1              return (x+7*len);
 677   1      }
 678          
 679          unsigned char cPrint12(unsigned char cfs,unsigned char efs,char line,char Column,char * str,unsigned char 
             -i)
 680          {
 681   1              xdata unsigned char len = cStrLen(str);
 682   1              FontMode(1,0);
 683   1              FontSet(efs,1);
 684   1              FontSet_cn(cfs,1);
 685   1              if (line<1) line = 1; if (Column<1) Column=1;
 686   1              if (i)
 687   1              {
 688   2                      if (i&0x80)
 689   2                      {
 690   3                              Line(Column-1,line+13,Column+13*len,line+13);
 691   3                      }
 692   2                      else
 693   2                      {
 694   3                              FontSet(efs,0);
 695   3                              FontSet_cn(cfs,0);
 696   3                              FontMode(1,1);
 697   3                              if (i==2)
 698   3                              {
 699   4                                      Rectangle(0,line-1,127,line+12,1);
 700   4                              }
 701   3                              else
 702   3                              {
 703   4                                      Rectangle(Column-1,line-1,Column+13*len,line+12,1);
 704   4                              }
 705   3                      }
 706   2              }
 707   1              PutString_cn(Column-((len<10)?0:1),line,str);
 708   1              return (Column+13*len);
 709   1      }
 710          
 711          /*
 712          unsigned char PrintNum(unsigned char cfs,unsigned char efs,char line,char Column,unsigned int num,unsigned
             - char i)
 713          {
 714                  xdata unsigned char len = ((i&0x10)?5:3);
 715                  FontMode(1,0);
 716                  FontSet(efs,1);
 717                  FontSet_cn(cfs,1);
 718                  if (line<1) line = 1; if (Column<1) Column=1;
 719                  if (i&0x0F)
 720                  {
 721                          if ((i & 0x80))
 722                          {
 723                                  //Rectangle(Column-1,Line-1,Column+6*len-1,Line-1,0);
 724                                  Line(Column,line,Column + 6*len,line);
 725                          }
 726                          else
 727                          {
 728                                  FontSet(efs,0);
 729                                  FontSet_cn(cfs,0);
 730                                  FontMode(1,1);
 731                                  Rectangle(Column-1,line-1,Column+6*len-1,line+12,1);
 732                          }
 733                  }
 734          
 735                  if (i & 0x10)
C51 COMPILER V9.00   LCD_DIS                                                               05/09/2013 21:26:08 PAGE 13  

 736                  {
 737                          PutString(Column+2,line,i2s(num,));
 738                          //ShowShort(Column,Line,num,1);
 739                  }
 740                  else
 741                  {
 742                          //PutString(Column+2,Line,i2s((char)num));
 743                          ShowChar(Column+2,line,num,1);
 744                  }
 745                  return (Column+13*len);
 746          }
 747          */
 748          /*
 749          void Print6(unsigned char fs,char Line,char Column, char * str,unsigned char i)
 750          {
 751                  FontMode(1,0);
 752                  FontSet(fs,1);
 753                  if (i)
 754                  {
 755                          FontSet(fs,0);
 756                          FontMode(0,1);
 757                          Rectangle(Column,Line,Column+6*StrLen(str)-1,Line+8,1);
 758                  }
 759                  PutString(Column,Line,str);
 760                  FontMode(1,0);
 761          }
 762          */
 763          #endif //__LCD_DISCFILE__


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1769    ----
   CONSTANT SIZE    =      3    ----
   XDATA SIZE       =      8       7
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     15      63
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       3
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
